[[{"i":"flappy-bird-game-project-overview","l":"Flappy Bird Game: Project Overview","p":["Welcome to the Flappy Bird Game Project! \uD83D\uDC26\uD83C\uDFAE"]},{"l":"Introduction","p":["In this project, we have created a simplified version of the popular Flappy Bird game using simple HTML, CSS, and JavaScript. Flappy Bird is a classic arcade game where the player controls a bird, guiding it through a series of pipes without hitting them. The objective is to navigate the bird through the pipes as far as possible to achieve the highest score."]},{"l":"Features","p":["Simple Controls: Players can control the bird's altitude by pressing the spacebar, up arrow key, or \"X\" key.","Scoring System: Players earn points for successfully passing through each set of pipes.","Collision Detection: Accurate collision detection ensures that the game ends when the bird collides with the pipes or the ground.","Restart Mechanism: After a collision, players can restart the game by pressing specific keys, enhancing the user experience and maintaining the game's flow."]},{"l":"Technologies Used","p":["HTML: Used for structuring the game's layout and elements.","CSS: Styled the game elements to create an appealing visual experience.","JavaScript: Implemented game logic, including bird movement, pipe generation, scoring, collision detection, and restart functionality."]},{"l":"How to Play","p":["Open the game in your web browser.","Press the spacebar, up arrow key, or \"X\" key to control the bird's altitude.","Navigate the bird through the pipes by avoiding collisions.","Earn points for passing through each set of pipes.","If the bird collides with a pipe or the ground, press the specific keys to restart the game and continue playing."]},{"i":"game-gif","l":"Game (GiF)","p":["The Flappy Bird Game"]},{"l":"Conclusion","p":["The Flappy Bird Game Project offers an engaging and nostalgic gaming experience, reminiscent of the classic arcade era. With its simple controls, scoring system, and restart mechanism, players can enjoy hours of addictive gameplay. Dive in and see how far you can guide the flappy bird through the obstacles!","Let the flapping begin! \uD83D\uDE80"]}],[{"i":"objectives--challenges","l":"Objectives & Challenges"},{"l":"Project Development Phases"},{"l":"1. Storyboard Design","p":["Develop a detailed storyboard outlining the flow of the project. This will serve as a roadmap for the development process, ensuring a clear understanding of the game's structure and functionality."]},{"l":"2. Resource Gathering","p":["Gather all the necessary resources for the project, including graphics for the bird, pipes, background, and any other elements needed for the game. This step ensures that all required assets are available before proceeding with development."]},{"l":"3. Game Mechanics Implementation","p":["Implement the core game mechanics, including the movement of the bird and collision detection with obstacles such as pipes. This phase focuses on bringing the game to life by coding its fundamental functionalities."]},{"l":"4. User Input Handling","p":["Develop functionality to capture user input, such as keyboard presses to control the bird's movement. This step enables players to interact with the game and control the bird's actions effectively."]},{"l":"5. Scoring System","p":["Create a scoring system that increases with each successful passage through a set of pipes. This adds an element of challenge and progression to the game, motivating players to achieve higher scores."]},{"l":"6. Animation Integration","p":["Integrate animations seamlessly with the HTML canvas. This final phase enhances the visual appeal of the game by adding fluid animations to the bird, pipes, and other elements, creating a more immersive gaming experience."]},{"l":"Challenges"},{"i":"challenge-1-the-game-didt-have-a-clear-way-to-restart","l":"Challenge 1: The game did't have a clear way to restart","p":["Situation: After the bird crashes, there was no way for the user to restart the game without refreshing the page. This disrupted the flow of the game.","Task: To implement a mechanism for the user to restart the game after a collision.","Action: In the moveBird function within the flappybird.js file, we included a conditional statement that checks if the user presses the spacebar, up arrow key, or \"X\" key. If any of these keys are pressed and the game is over ( gameOver is true), the function resets several variables:","bird.y is set back to its original position.","The pipeArray is emptied, removing all pipes from the screen.","The score is reset to 0.","The gameOver flag is set to false, allowing the game to resume.","Result: Now the user can restart the game by detecting specific key presses when the game is over. This enhances the user experience by allowing them to resume playing without needing to refresh the page."]},{"i":"challenge-2-collision-detection-between-bird-and-pipes","l":"Challenge 2: Collision Detection between Bird and Pipes","p":["Action:","Added a collision detection function to the flappybird.js file.","Empty the pipeArray, removing all pipes from the screen.","For collision detection:","For the restart mechanism:","If a collision is detected, trigger the game over conditions to end the game.","If any of these keys are pressed, reset several variables:","Implement a mechanism for the user to restart the game after a collision and improve collision detection between the bird and pipes.","In the moveBird function within the flappybird.js file, added a conditional statement to check if the user presses specific keys (spacebar, up arrow key, or \"X\" key) when the game is over ( gameOver is true).","Overall, by addressing the challenges of implementing a restart mechanism and accurate collision detection, the team has successfully improved the game's functionality and user experience.","Reset the score to 0.","Result:","Set bird.y back to its original position.","Set the gameOver flag to false, allowing the game to resume.","Situation: The game did not have a clear way for the user to restart after the bird crashes, which disrupted the flow of the game. Accurate collision detection between the bird and pipes was also crucial for determining the game's outcome.","Task:","The user can now restart the game by pressing specific keys when the game is over, enhancing the user experience by allowing them to resume playing without refreshing the page.","This function checks whether the bounding boxes of the bird and pipes intersect or not by comparing their positions and sizes.","With the implementation of the collision detection function, the game now accurately detects collisions between the bird and pipes, providing a more realistic and engaging gameplay experience."]}],[{"l":"Project Resources and Assets"},{"l":"Resources"},{"l":"Graphics","p":["Bird sprite: Image representing the bird character in various states (e.g., flapping wings, idle).","Pipe sprite: Graphics for the pipes that the bird must navigate through.","Background image: Visual backdrop for the game environment, providing context for the gameplay."]},{"l":"Code Libraries","p":["HTML: Markup language for structuring the game's layout and elements.","CSS: Styling language for customizing the appearance of game elements.","JavaScript: Programming language for implementing game logic, including movement, collision detection, and scoring."]},{"l":"Development Tools","p":["Text Editor: Software for writing and editing code files, such as Visual Studio Code.","Browser: Web browser for testing and running the game, such as Google Chrome and Arc Browser.","Github: For hosting the repository.","Github Pages: For deployment of the game and the documentation website."]},{"l":"Assets"},{"l":"Icons","p":["Favicon.io: Website for generating custom favicon icons.","Figma: Online design tool for creating graphics and UI/UX designs (Was helpful in making the storyboard). Figma","Canva: Graphic design platform for creating various visual assets (Like the icon you see on top of the webpage). Canva"]},{"l":"Websites and Videos","p":["ChatGPT: OpenAI's ChatGPT research page for curating the very specific prompts that helped in the project.","JavaScript Animation Documentation: Mozilla Developer Network's documentation on JavaScript animation using the Web Animations API.","FreeCodeCamp: FreeCodeCamp's website offering free coding tutorials and resources.","Animation Articles: CSS-Tricks' category page on animation, featuring articles and tutorials."]}],[{"l":"Sources of Inspiration","p":["Flappy Bird Game: The addictive gameplay and simple mechanics of the original Flappy Bird game inspired us to create our version with HTML, CSS, and JavaScript.","Classic Arcade Games: Drawing from the charm and simplicity of classic arcade games like Space Invaders and Pac-Man, we aimed to capture a similar retro gaming experience in our project.","Online Tutorials and Resources: We extensively utilized online tutorials, articles, and resources on game development, JavaScript programming, and HTML5 canvas animation to enhance our understanding and implementation."]},{"l":"Computer Graphics Course","p":["Core Studies: Our computer graphics course provided a solid foundation in graphics programming concepts, including rasterization, transformations, and collision detection algorithms.","2D Graphics Understanding: Through the course, we gained insights into 2D graphics principles, which were instrumental in creating visually appealing game elements such as sprites and backgrounds.","Animation Techniques: Learning animation techniques helped us implement smooth animations for the bird, pipes, and other game components, enhancing the overall gaming experience."]},{"l":"Building the Project","p":["Collaboration: We collaborated closely with team members, dividing tasks efficiently and leveraging each other's strengths to bring different aspects of the project to fruition.","Prototyping: Before implementation, we created prototypes and mockups to visualize the game's layout, mechanics, and user interface, ensuring a clear direction for development.","Iterative Development: We adopted an iterative approach, continuously testing, gathering feedback, and refining the game to improve gameplay mechanics and user experience iteratively.","Version Control: Version control systems like Git and GitHub played a crucial role in managing project files, facilitating collaboration, and enabling seamless integration of new features and fixes."]}]]